from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message

from config import config
from data.functions.Banker import checked_btc
from data.functions.db import update_balance, get_user,enter_promo,exists_promo,info_participate,check_participate,add_participate
from filters.filters import IsPrivate, IsPrivateCall
from keyboards.inline.games_keyboard import understand_keyboard
from keyboards.inline.other_keyboards import deposit_keyboard, output_keyboard, participate
from loader import dp, bot
from states.states import OutputState, Money
import re



# –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã
@dp.callback_query_handler(text="wheel_of_fortune", state="*")
async def wheel_fortune(call: CallbackQuery, state: FSMContext):
    amount_wheel = open("wheel_of_fortune.txt","r").readline()
    print(amount_wheel)
    c_participate = await info_participate()
    check = await check_participate(call.message.chat.id)
    info = '–ù–µ —É—á–∞–≤—Å—Ç–≤—É–µ—à—å'
    keyboard_get = participate()
    
    if(check):
        c_participate = await info_participate()
        veroyatnost = 1/int(len(c_participate))*100
        info = f'–£—á–∞—Å—Ç–≤—É–µ—à—å. –¢–≤–æ–π —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É {veroyatnost}%'
        keyboard_get= None
    await call.message.edit_text(f'''
üèµ –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã - —Ä—É–ª–µ—Ç–∫–∞, –≥–¥–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–π–≥—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞!

üöÄ –ö–æ–ª–µ—Å–æ –¥–µ–ª–∞–µ—Ç —Å–≤–æ—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00 –ø–æ –º—Å–∫ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.

üî• –£—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {amount_wheel} RUB

üë§ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(c_participate)}
‚ö°Ô∏è –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å: {info}
''', reply_markup=keyboard_get)

@dp.callback_query_handler(text_startswith="confirm", state="*")
async def c_message(call: CallbackQuery, state: FSMContext):
    amount_wheel = open("wheel_of_fortune.txt","r").readline()
    print(amount_wheel)
    user_balance = get_user(call.message.chat.id)[1]
    if int(user_balance) >= int(amount_wheel):
        update_balance(call.message.chat.id, -int(amount_wheel))
        await add_participate(call.message.chat.id)
        participate = await info_participate()
        veroyatnost = 1/int(len(participate))*100
        countpart  = re.findall(r'–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ([0-9]+)',call.message.text)[0]
        s = call.message.text.replace(f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {countpart}",f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participate)}")
        await call.message.edit_text(text=s.replace('–ù–µ —É—á–∞–≤—Å—Ç–≤—É–µ—à—å', f'–£—á–∞—Å—Ç–≤—É–µ—à—å. –¢–≤–æ–π —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É {veroyatnost}%'))
    else:
        await call.message.answer("‚ùå –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ—Ç –¥–∞–Ω–Ω–æ–π —Å—É–º–º—ã.")

@dp.callback_query_handler(text_startswith="promocode",state="*")
async def promocode_message(call: CallbackQuery, state: FSMContext):
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥")
    await Money.promocode.set()


@dp.message_handler(IsPrivate(), state=Money.promocode)
async def promocode(message: Message, state: FSMContext):
    if(await enter_promo(message.chat.id,message.text)):
        price = await exists_promo(message.text)
        await message.answer( f'üí∏ –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å—É–º–º—É <b>{price}</b> ‚ÇΩ')
    else:
        await message.answer(f'üíÅüèª‚Äç‚ôÄÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥ <code>{message.text}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω')
    await state.finish()


@dp.callback_query_handler(text_startswith="send_money",state="*")
async def send_money(call: CallbackQuery, state: FSMContext):
    user_balance = get_user(call.message.chat.id)[1]
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–¥–∞—Ä–∫–∞ –≤ —Ä—É–±–ª—è—Ö –¥–æ {user_balance} RUB")
    await Money.send_money_user.set()

@dp.message_handler(IsPrivate(), state=Money.send_money_user)
async def send_money_user(message: Message, state: FSMContext):
    user_balance = get_user(message.chat.id)[1]
    try:
        if int(message.text) <= user_balance:
            if message.text.isdigit():
                await state.update_data(amount=message.text)
                await message.answer(f"üÜî –ü—Ä–∏—à–ª–∏ –º–Ω–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ–º—É –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {message.text} RUB")
                await Money.send_money_finish.set()
            else:
                await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
                await state.finish()
        else:
            await message.answer(f"‚ùå –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ—Ç –¥–∞–Ω–Ω–æ–π —Å—É–º–º—ã.")
            await state.finish()
    except:
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
        await state.finish()
@dp.message_handler(IsPrivate(), state=Money.send_money_finish)
async def send_money_finish(message: Message, state: FSMContext):
    try:
        user_id_send = get_user(message.text)[0]
        print(user_id_send)
        data = await state.get_data()
        amount = int(data['amount'])
    
        print(user_id_send)
        update_balance(message.chat.id, -amount)
        update_balance(message.text, amount)
        await message.answer(f"‚úÖ –°—É–º–º–∞ {amount} RUB —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        await bot.send_message(message.text,f"‚≠êÔ∏è –í–∞–º –ø—Ä–∏—à–µ–ª –ø–æ–¥–∞—Ä–æ–∫ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} RUB –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}")
        await state.finish()
    except Exception as err:
        await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

@dp.callback_query_handler(IsPrivateCall(), text="deposit")
async def admin_settings(call: CallbackQuery):
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    await call.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.",
                            reply_markup=deposit_keyboard())


@dp.callback_query_handler(IsPrivateCall(), text="deposit:banker")
async def admin_settings(call: CallbackQuery):
    await call.message.answer("–î–ª—è –æ–ø–ª–∞—Ç—ã —á–µ–∫–æ–º, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —á–∞—Ç.")


@dp.message_handler(IsPrivate())
async def deposit_btc(message: Message):
    if re.search(r'BTC_CHANGE_BOT\?start=', message.text):
        code = re.findall(r'c_\S+', message.text)[0]
        msg =  await checked_btc(message.chat.id, code)
        await message.answer(msg, reply_markup=understand_keyboard())

@dp.callback_query_handler(IsPrivateCall(), text="output")
async def output_1(call: CallbackQuery):
    user_balance = get_user(call.message.chat.id)[1]
    if user_balance >= 100:
        await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ –æ—Ç 100 –¥–æ {user_balance} RUB")
        await OutputState.amount.set()
    else:
        await call.message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ 100 RUB")


@dp.message_handler(IsPrivate(), state=OutputState.amount)
async def output_2(message: Message, state: FSMContext):
    if message.text.isdigit():
        user_balance = get_user(message.chat.id)[1]
        if 100 <= int(message.text):
            if int(message.text) <= user_balance:
                async with state.proxy() as data:
                    data["amount"] = int(message.text)
                await message.answer(f"–ö—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å.",
                                     reply_markup=output_keyboard())
                await OutputState.next()
            else:
                await message.answer(f"‚ùó –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ—Ç –¥–∞–Ω–Ω–æ–π —Å—É–º–º—ã.")
        else:
            await message.answer(f"‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 100 RUB.")
    else:
        await message.answer(f"‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.")

@dp.callback_query_handler(IsPrivateCall(), state=OutputState.place)
async def output_3(call: CallbackQuery, state: FSMContext):
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    if call.data == "output:qiwi":
        async with state.proxy() as data:
            data["place"] = "qiwi"
        await call.message.answer(f"–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–≤–µ–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞.")
        await OutputState.next()
    elif call.data == "output:banker":
        async with state.proxy() as data:
            amount = data["amount"]
            data["place"] = "banker"
        await call.message.answer(f"üí∞ –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: <b>{amount}</b>\n\n"
                                  f"‚ÑπÔ∏è–ü–ª–æ—â–∞–¥–∫–∞: <b>Banker</b>\n\n"
                                  f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>+</b>")
        await OutputState.confirm.set()
    elif call.data == "output:cancel":
        await call.message.answer(f"–í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω.")
        await state.finish()


@dp.message_handler(IsPrivate(), state=OutputState.requesites)
async def output_4(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data["requesites"] = message.text
        amount = data["amount"]
    await message.answer(f"üí∞ –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: <b>{amount}</b>\n\n"
                         f"üì± –†–µ–∫–≤–µ–∑–∏—Ç—ã:<b>{message.text}</b>\n\n"
                              f"‚ÑπÔ∏è–ü–ª–æ—â–∞–¥–∫–∞: <b>QIWI</b>\n\n"
                              f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>+</b>")
    await OutputState.confirm.set()


@dp.message_handler(IsPrivate(), state=OutputState.confirm)
async def output_4(message: Message, state: FSMContext):
    if message.text == "+":
        async with state.proxy() as data:
            if data["place"] == "qiwi":
                requesites = data["requesites"]
            amount = data["amount"]
            place = data["place"]
        update_balance(message.chat.id, -amount)
        await message.answer("–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞")

        text = f"""‚≠êÔ∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!
Telegram ID: {message.chat.id}
@{message.from_user.username} | <a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>
–°—É–º–º–∞: {amount}
–ü–ª–æ—â–∞–¥–∫–∞: {place}\n"""
        if place == "qiwi":
            text += f"–†–µ–∫–≤–µ–∑–∏—Ç—ã: {requesites}"
        #for admin in config("admin_id").split(":"):
        #    await bot.send_message(chat_id=admin, text=text)
        await bot.send_message(chat_id=config("admin_chat"), text=text)
        await bot.send_message(chat_id=config("chat_id"), text=f"‚≠êÔ∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a> –≤—ã–≤–æ–¥–∏—Ç {amount} —Ä—É–±–ª–µ–π")
    await state.finish()